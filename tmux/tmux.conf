# cat << EOF > /dev/null

# -- general ----------------------------------------------------------------

# C-b is not acceptable -- Vim uses it
set-option -g prefix C-a
bind-key C-a last-window

# Allows for faster key repetition. Faster command sequences.
set -s escape-time 10

# Increase repeat timeout
set -sg repeat-time 600

# When enabled, focus events are requested from the terminal if supported and
# passed through to applications running in tmux.
set -s focus-events on

# boost history
set -g history-limit 5000

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# auto window rename to reflect current program
set-window-option -g automatic-rename on
# renumber windows when a window is closed
set -g renumber-windows on

# Keep windows around after they exit
set -g remain-on-exit off

# monitor-activity [on | off]
# Monitor for activity in the window. Windows with activity are highlighted
# in the status line.
setw -g monitor-activity on

# visual-activity [on | off | both]
# If on, display a message instead of sending a bell when activity occurs in a
# window for which the monitor-activity window option is enabled. If set to
# both, a bell and a message are produced.
set -g visual-activity on

# Set the time in milliseconds for which the indicators shown by the display-panes command appear.
set -g display-panes-time 2000

# Set the amount of time for which status line messages and other on-screen indicators are displayed.
# If set to 0, messages and indicators are displayed until a key is pressed. time is in milliseconds.
set -g display-time 500

# Start windows numbering at 1
set -g base-index 1
# Make pane numbering consistent with windows
setw -g pane-base-index 1

# set terminal title
# - host_short #h Hostname of local host (no domain name)
# - window_index #I Index of window
# - window_name #W Name of window
# - session_name #S Name of session
set -g set-titles on
set -g set-titles-string '#h ● #I ♪ #W'

# Open new window
bind-key C command-prompt -p "Name of new window: " "new-window -n '%%'"

# create new session
bind C-c new-session

# find session
bind C-f command-prompt -p find-session 'switch-client -t %%'

# reload config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded..."

# tmux git-bar plugin
source-file "$HOME/.tmux-gitbar/tmux-gitbar.tmux"

# -- display -------------------------------------------------------------------

# colors!!!!
set -g default-terminal "screen-256color"

# Message style
set -g message-style "fg=#000000,bg=#ffff00,bold" # black, yellow

# pane border
setw -g pane-border-style "fg=#444444,bg=default" # grey
set -g pane-active-border-style "fg=#00afff,bg=default" # light blue

# status style
set -g status-style "fg=#8a8a8a,bg=#080808,none" # light grey, dark gray
set -g status-left-style "fg=#8a8a8a,bg=#080808,none" # light grey, dark grey
set -g status-right-style "fg=#8a8a8a,bg=#080808,none" # light grey, dark grey

# default window colors
setw -g window-style "default"

# active window title colors
setw -g window-status-style "fg=#8a8a8a,bg=#080808,none" # light grey, dark grey
setw -g window-status-format "#I:#W #{?window_zoomed_flag,🔍,#F}"
setw -g window-status-current-style "fg=#000000,bg=#00afff,bold" # black, ligth blue

# pane number display
set-option -g display-panes-active-colour colour34 # blue
set-option -g display-panes-colour colour166 # orange

# Set status line style for windows with an activity alert
setw -g window-status-activity-style "fg=default,bg=default,underscore"

# clock
set-window-option -g clock-mode-colour "#00afff" # light blue
setw -g clock-mode-style 24

# bell
# Monitor for a bell in the window.  Windows with a bell are highlighted in the status line.
setw -g monitor-bell on
set-window-option -g window-status-bell-style "fg=#ffff00,bg=default,blink,bold" # yellow
setw -g window-status-last-style "fg=#00afff,bg=default,none" # ligth blue

# Style for copy-mode mode
setw -g mode-style "fg=#000000,bg=#ffff00,bold" # black, yellow

# -- end display -------------------------------------------------------------------

# -- navigation ----------------------------------------------------------------

setw -g xterm-keys on

# pane navigation
# hjkl pane traversal
# bind -r h select-pane -L # move left
# bind -r j select-pane -D # move down
# bind -r k select-pane -U # move up
# bind -r l select-pane -R # move right
# bind > swap-pane -D       # swap current pane with the next one
# bind < swap-pane -U       # swap current pane with the previous one

# pane resizing
# bind -r H resize-pane -L 2
# bind -r J resize-pane -D 2
# bind -r K resize-pane -U 2
# bind -r L resize-pane -R 2

# switch panes using [Shift]-arrow without prefix
bind -n S-Left select-pane -L
bind -n S-Right select-pane -R
bind -n S-Up select-pane -U
bind -n S-Down select-pane -D

# switch windows using [Ctrl]-arrow without prefix
bind -n C-Left previous-window
bind -n C-Right next-window

# set window split
bind-key v split-window -h
bind-key h split-window

# toggle mouse
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"

# -- copy mode ----------------------------------------------------------------

# Vim copypaste mode
set-window-option -g mode-keys vi
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-selection-and-cancel y send-keys -X copy-selection-and-cancel

# -- status bar ----------------------------------------------------------------

set-option -g status on
# Update the status line every interval seconds.
# By default, updates will occur every 15 seconds. A setting of zero disables redrawing at interval.
set-option -g status-interval 5
# set align window list (left | centre | right)
set -g status-justify centre
set -g status-left-length 200
set -g status-right-length 140
# setw -g window-status-current-format "#[fg=colour234,bg=colour237,nobold,nounderscore,noitalics]#[fg=colour144,bg=colour237] #I #[fg=colour144,bg=colour237] #{pane_current_path} #[fg=colour144,bg=colour237] #W #[fg=colour237,bg=colour234,nobold,nounderscore,noitalics]"
setw -g window-status-current-format "#I: #W #{?window_bell_flag,🔔,} #{?window_zoomed_flag,🔍,} "
# set -g status-left '#[fg=cyan,bold] #U@#H #[default]#[fg=blue]#(tmux display-message -p "#{pane_current_path}" | sed "s#$HOME#~#g") #[fg=red]%H:%M %d-%b-%y#[default]'
set -g status-left '#[fg=cyan,bold]#U@#H:#[fg=blue]#(tmux display-message -p "#{pane_current_path}" | sed "s#$HOME#~#g")$'
# set -g status-right '#[fg=green,bg=default,bright]#(tmux-mem-cpu-load) #[fg=red,dim,bg=default]#(uptime | cut -f 4-5 -d " " | cut -f 1 -d ",") #[fg=white,bg=default]%a%l:%M:%S %p#[default] #[fg=blue]%Y-%m-%d'
set -g status-right '#[fg=green,bg=default,bright]#(tmux-mem-cpu-load --interval 2) #[fg=white,bg=magenta] #(cut -c3- ~/.tmux.conf | sh -s _root "#{pane_tty}") '

# Resurrect ssh sessions
set -g @resurrect-processes 'ssh'
set -g @resurrect-strategy-vim 'session'
set -g @resurrect-capture-pane-contents 'on'

########################### Tmux Plugin Manager ##############################
# List of plugins
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-logging'
# Needed for showing current username in status left.(#U variable)
set -g @tpm_plugins "soyuka/tmux-current-pane-hostname"
set -g @plugin 'thewtex/tmux-mem-cpu-load'
set -g @plugin 'tmux-plugins/tmux-yank'
# set -g @plugin 'tmux-plugins/tmux-sessionist'

# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'

# -- 8< ------------------------------------------------------------------------

# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# export LC_NUMERIC=C
#
# _toggle_mouse() {
#   old=$(tmux show -gv mouse)
#   new=""
#
#   if [ "$old" = "on" ]; then
#     new="off"
#   else
#     new="on"
#   fi
#
#   tmux set -g mouse $new \;\
#        display "mouse: $new"
# }
#
# _username() {
#   tty=${1:-$(tmux display -p '#{pane_tty}')}
#   username=$(ps -t "$tty" -o user= -o pid= -o ppid= -o command= | awk '
#       !/ssh/ { user[$2] = $1; ppid[$3] = 1 }
#           END {
#             for (i in user)
#               if (!(i in ppid))
#               {
#                 print user[i]
#                 exit
#               }
#           }
#         ')
#
#   echo "$username"
# }
#
# _root() {
#   tty=${1:-$(tmux display -p '#{pane_tty}')}
#   username=$(_username "$tty" false)
#   echo $username
#   if [ x"$username" = x"root" ]; then
#     tmux show -gqv '@root'
#   else
#     echo ""
#   fi
# }
#
# "$@"
#
